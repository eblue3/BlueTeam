------------------------------------- ## --------------------------------------  ------------------------------------- ## --------------------------------------
                         Assembly Language Statements                                                    Assembly Language Statements
------------------------------------- ## --------------------------------------  ------------------------------------- ## --------------------------------------
 Assembly language programs consist of three types of statements âˆ’
 - Executable instructions or instructions.
 The executable instructions or simply instructions tell the processor what to do.
 Each instruction consists of an operation code (opcode). Each executable instruction generates one machine language instruction.
 Ex:
   mov eax, 10
   add eax, 10
   ...

 - Assembler directives or pseudo-ops.
 The assembler directives or pseudo-ops tell the assembler about the various aspects of the assembly process.
 These are non-executable and do not generate machine language instructions.
 Ex:
   .common, .global, .local, .weak
=>
   .pushsection    ".data"
   .global   foo1        ! int foo1 = 1
   .align    4
   foo1:
   .word  0x1
   .type  foo1,#object   ! foo1 is of type data object,
   .size  foo1,4         ! with size = 4 bytes
   .weak  foo2           ! #pragma weak foo2 = foo1
   foo2 = foo1
   .local  foo3          ! static int foo3
   .common  foo3,4,4
   .align  4             ! static int foo4 = 2
   foo4:
   .word  0x2
   .type  foo4,#object
   .size  foo4,4
   .popsection
   ...

 - Macros.
 Macros are basically a text substitution mechanism.
 Ex:
   %macro macro_name  number_of_params
   <macro body>
   %endmacro
